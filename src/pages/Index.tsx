import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';

interface GameState {
  budget: number;
  daysUntilElection: number;
  reputation: number;
  corruption: number;
}

interface Curb {
  id: number;
  type: string;
  condition: 'new' | 'good' | 'old' | 'critical';
  material: string;
  price: number;
  defects?: string[];
}

interface Contractor {
  id: string;
  name: string;
  description: string;
  costModifier: number; // 0.8 = 20% –¥–µ—à–µ–≤–ª–µ, 1.2 = 20% –¥–æ—Ä–æ–∂–µ
  timeModifier: number; // 0.5 = –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ, 2.0 = –≤ 2 —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ
  qualityModifier: number; // 0.8 = —Ö—É–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ, 1.2 = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ
  corruptionModifier: number; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–∞—Ç—ã
  speciality?: string; // —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  icon: string;
  reputation: number; // –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥
}

interface CurbConfig {
  material: string;
  basePrice: number;
  extras: {
    lighting?: boolean;
    antiVandal?: boolean;
    heating?: boolean;
    customColor?: string;
  };
}

const CurbMania = () => {
  const [gameState, setGameState] = useState<GameState>({
    budget: 10000000,
    daysUntilElection: 365,
    reputation: 75,
    corruption: 0
  });

  const [curbs, setCurbs] = useState<Curb[]>([
    { id: 1, type: 'concrete', condition: 'old', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 2, type: 'granite', condition: 'good', material: '–ì—Ä–∞–Ω–∏—Ç–Ω—ã–π', price: 4000 },
    { id: 3, type: 'marble', condition: 'new', material: '–ú—Ä–∞–º–æ—Ä–Ω—ã–π', price: 6000 },
    { id: 4, type: 'plastic', condition: 'critical', material: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π', price: 500 },
    { id: 5, type: 'concrete', condition: 'old', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 6, type: 'gold', condition: 'new', material: '–ó–æ–ª–æ—Ç–æ–π', price: 21000 },
    { id: 7, type: 'granite', condition: 'good', material: '–ì—Ä–∞–Ω–∏—Ç–Ω—ã–π', price: 4000 },
    { id: 8, type: 'concrete', condition: 'critical', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 9, type: 'marble', condition: 'old', material: '–ú—Ä–∞–º–æ—Ä–Ω—ã–π', price: 6000 }
  ]);

  const [selectedCurb, setSelectedCurb] = useState<Curb | null>(null);
  const [isSearchingDefects, setIsSearchingDefects] = useState(false);
  const [foundDefects, setFoundDefects] = useState<string[]>([]);
  const [notifications, setNotifications] = useState<string[]>([]);
  const [totalSpent, setTotalSpent] = useState(0);
  const [showTutorial, setShowTutorial] = useState(true);
  const [selectedContractor, setSelectedContractor] = useState<Contractor | null>(null);
  const [showContractorDialog, setShowContractorDialog] = useState(false);
  const [showCurbConstructor, setShowCurbConstructor] = useState(false);
  const [curbConfig, setCurbConfig] = useState<CurbConfig>({
    material: 'concrete',
    basePrice: 1000,
    extras: {}
  });

  const contractors: Contractor[] = [
    {
      id: 'rogatie',
      name: 'üõû –†–æ–≥–∞—Ç—ã–µ —à–∏–Ω—ã',
      description: '–ë—ã—Å—Ç—Ä–æ, –¥—ë—à–µ–≤–æ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ... –Ω—É –≤—ã –ø–æ–Ω—è–ª–∏',
      costModifier: 0.7,
      timeModifier: 0.5,
      qualityModifier: 0.6,
      corruptionModifier: 0.1,
      speciality: '–°–∫–æ—Ä–æ—Å—Ç—å',
      icon: 'üõû',
      reputation: 2
    },
    {
      id: 'elitstroy',
      name: 'üèõÔ∏è –≠–ª–∏—Ç–°—Ç—Ä–æ–π',
      description: '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞ –ø—Ä–µ–º–∏—É–º —Ü–µ–Ω—É',
      costModifier: 1.5,
      timeModifier: 1.8,
      qualityModifier: 1.4,
      corruptionModifier: 0.05,
      speciality: '–ö–∞—á–µ—Å—Ç–≤–æ',
      icon: 'üèõÔ∏è',
      reputation: 5
    },
    {
      id: 'uncle-vanya',
      name: 'üë∑ –î—è–¥—è –í–∞–Ω—è –ß–û–ü',
      description: '–ù–∞–¥—ë–∂–Ω–æ, –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –ø–æ–Ω—Ç–æ–≤',
      costModifier: 1.0,
      timeModifier: 1.0,
      qualityModifier: 1.0,
      corruptionModifier: 0.25,
      speciality: '–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å',
      icon: 'üë∑',
      reputation: 3
    },
    {
      id: 'mega-stroy',
      name: 'üèóÔ∏è –ú–µ–≥–∞–°—Ç—Ä–æ–π',
      description: '–ë–æ–ª—å—à–∏–µ –æ–±—ä—ë–º—ã, —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–∫–∞—Ç—ã',
      costModifier: 0.9,
      timeModifier: 0.8,
      qualityModifier: 0.9,
      corruptionModifier: 0.4,
      speciality: '–û—Ç–∫–∞—Ç—ã',
      icon: 'üèóÔ∏è',
      reputation: 3
    }
  ];

  const defectsList = [
    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–∏–∫—Ä–æ—Ç—Ä–µ—â–∏–Ω–∞",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ì–û–°–¢–∞ 52289-2004",
    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –æ—Ç—Ç–µ–Ω–æ–∫",
    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "–ù–µ—ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥"
  ];

  const getCurbEmoji = (type: string) => {
    switch (type) {
      case 'concrete': return 'üß±';
      case 'granite': return 'üóø';
      case 'marble': return '‚ö™';
      case 'plastic': return 'üü°';
      case 'gold': return 'üèÜ';
      default: return 'üèóÔ∏è';
    }
  };

  const getCurbGradient = (type: string) => {
    switch (type) {
      case 'concrete': return 'from-gray-600 to-gray-400';
      case 'granite': return 'from-slate-700 to-slate-500';
      case 'marble': return 'from-white to-gray-200';
      case 'plastic': return 'from-yellow-500 to-orange-400';
      case 'gold': return 'from-yellow-500 to-yellow-300';
      default: return 'from-gray-500 to-gray-300';
    }
  };

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case 'new': return 'bg-green-500';
      case 'good': return 'bg-blue-500';
      case 'old': return 'bg-yellow-500';
      case 'critical': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getConditionText = (condition: string) => {
    switch (condition) {
      case 'new': return '–ù–æ–≤—ã–π';
      case 'good': return '–•–æ—Ä–æ—à–∏–π';
      case 'old': return '–°—Ç–∞—Ä—ã–π';
      case 'critical': return '–ê–≤–∞—Ä–∏–π–Ω—ã–π';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const searchForDefects = () => {
    setIsSearchingDefects(true);
    
    setTimeout(() => {
      const randomDefects = defectsList
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.floor(Math.random() * 3) + 1);
      
      setFoundDefects(randomDefects);
      setIsSearchingDefects(false);
    }, 2000);
  };

  const replaceCurb = (newMaterial: string, newPrice: number, newType: string) => {
    if (selectedCurb && selectedContractor && gameState.budget >= newPrice) {
      const baseKickback = Math.floor(newPrice * 0.25);
      const contractorKickback = Math.floor(baseKickback * selectedContractor.corruptionModifier);
      const modifiedPrice = Math.floor(newPrice * selectedContractor.costModifier);
      const actualCost = modifiedPrice - contractorKickback;
      
      setCurbs(prev => prev.map(curb => 
        curb.id === selectedCurb.id 
          ? { ...curb, condition: 'new', material: newMaterial, price: modifiedPrice, type: newType }
          : curb
      ));
      
      setGameState(prev => ({
        ...prev,
        budget: prev.budget - actualCost,
        reputation: Math.min(100, prev.reputation + (foundDefects.length * 2) + Math.floor(selectedContractor.qualityModifier * 5)),
        corruption: prev.corruption + contractorKickback
      }));
      
      setTotalSpent(prev => prev + actualCost);
      
      addNotification(`üéâ ${selectedContractor.name} –∑–∞–º–µ–Ω–∏–ª ${selectedCurb.material} –Ω–∞ ${newMaterial}! –û—Ç–∫–∞—Ç: ${contractorKickback.toLocaleString()}‚ÇΩ`);
      
      setSelectedCurb(null);
      setSelectedContractor(null);
      setFoundDefects([]);
      setShowContractorDialog(false);
    }
  };

  const calculateFinalPrice = () => {
    if (!selectedContractor) return curbConfig.basePrice;
    
    let finalPrice = curbConfig.basePrice;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    if (curbConfig.extras.lighting) finalPrice += 2000;
    if (curbConfig.extras.antiVandal) finalPrice += 1500;
    if (curbConfig.extras.heating) finalPrice += 3000;
    if (curbConfig.extras.customColor) finalPrice += 500;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    return Math.floor(finalPrice * selectedContractor.costModifier);
  };

  const addNotification = (message: string) => {
    setNotifications(prev => [message, ...prev.slice(0, 2)]);
    setTimeout(() => {
      setNotifications(prev => prev.slice(0, -1));
    }, 5000);
  };

  useEffect(() => {
    const timer = setInterval(() => {
      setGameState(prev => ({
        ...prev,
        daysUntilElection: Math.max(0, prev.daysUntilElection - 1)
      }));
    }, 5000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-muted to-background text-foreground font-['Rubik']">
      {/* Header with resources */}
      <div className="resource-glow mx-4 mt-4 rounded-xl p-4">
        <div className="flex flex-wrap gap-4 justify-between items-center">
          <div className="flex items-center gap-2">
            <Icon name="Banknote" className="text-primary" />
            <div>
              <p className="text-sm text-muted-foreground">–ë—é–¥–∂–µ—Ç</p>
              <p className="text-lg font-bold text-primary">
                {gameState.budget.toLocaleString()}‚ÇΩ
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Icon name="Calendar" className="text-accent" />
            <div>
              <p className="text-sm text-muted-foreground">–î–æ –≤—ã–±–æ—Ä–æ–≤</p>
              <p className="text-lg font-bold text-accent">
                {gameState.daysUntilElection} –¥–Ω–µ–π
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Icon name="Users" className="text-secondary" />
            <div>
              <p className="text-sm text-muted-foreground">–†–µ–ø—É—Ç–∞—Ü–∏—è</p>
              <div className="flex items-center gap-2">
                <Progress value={gameState.reputation} className="w-20" />
                <span className="text-lg font-bold text-secondary">
                  {gameState.reputation}%
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Game title */}
      <div className="text-center py-8">
        <h1 className="text-6xl font-bold font-['Oswald'] holographic text-transparent bg-clip-text mb-2 neon-glow animate-pulse">
          –ë–û–†–î–Æ–† –ú–ê–ù–ò–Ø 2025
        </h1>
        <p className="text-lg text-muted-foreground">
          –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å–≤–æ–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        </p>
      </div>

      {/* Notifications */}
      {notifications.length > 0 && (
        <div className="fixed top-4 right-4 z-50 space-y-2">
          {notifications.map((notification, index) => (
            <div key={index} className="bg-primary text-primary-foreground px-4 py-2 rounded-lg shadow-lg animate-fade-in">
              {notification}
            </div>
          ))}
        </div>
      )}

      {/* Tutorial overlay */}
      {showTutorial && (
        <div className="fixed inset-0 bg-black/50 z-40 flex items-center justify-center p-4">
          <Card className="max-w-md bg-card p-6">
            <h3 className="text-xl font-bold mb-4">üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç—å!</h3>
            <div className="space-y-3 text-sm">
              <p>üéØ <strong>–¶–µ–ª—å:</strong> –û—Å–≤–æ–∏—Ç—å –±—é–¥–∂–µ—Ç, –∑–∞–º–µ–Ω–∏–≤ —Å—Ç–∞—Ä—ã–µ –±–æ—Ä–¥—é—Ä—ã</p>
              <p>üí∞ <strong>–ë—é–¥–∂–µ—Ç:</strong> 10 –º–ª–Ω —Ä—É–±–ª–µ–π –Ω–∞ –≥–æ–¥</p>
              <p>üîç <strong>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</strong></p>
              <ul className="list-disc ml-4 space-y-1">
                <li>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –±–æ—Ä–¥—é—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                <li>–ò—â–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã</li>
                <li>–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Ä–æ–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–∫–∞—Ç–æ–≤</li>
                <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ —Å—Ä–æ–∫–∞–º–∏ –≤—ã–±–æ—Ä–æ–≤</li>
              </ul>
            </div>
            <Button className="w-full mt-4" onClick={() => setShowTutorial(false)}>
              –ù–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É —á–∏–Ω–æ–≤–Ω–∏–∫–∞! üöÄ
            </Button>
          </Card>
        </div>
      )}

      {/* Game field */}
      <div className="max-w-4xl mx-auto px-4">
        <div className="grid grid-cols-3 gap-4 mb-8 game-grid">
          {curbs.map((curb) => (
            <Dialog key={curb.id}>
              <DialogTrigger asChild>
                <div className="curb-item" onClick={() => setSelectedCurb(curb)}>
                  <div className="text-center">
                    <div className="text-5xl mb-2 animate-float">{getCurbEmoji(curb.type)}</div>
                    <Badge className={`${getConditionColor(curb.condition)} text-white mb-2 neon-glow`}>
                      {getConditionText(curb.condition)}
                    </Badge>
                    <p className="font-semibold text-sm text-white neon-glow">{curb.material}</p>
                    <p className="text-xs text-primary font-bold">
                      {curb.price.toLocaleString()}‚ÇΩ
                    </p>
                  </div>
                </div>
              </DialogTrigger>
              
              <DialogContent className="max-w-md">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <Icon name="Wrench" />
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥—é—Ä–æ–º
                  </DialogTitle>
                </DialogHeader>
                
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-6xl mb-2">{getCurbEmoji(selectedCurb?.type || 'concrete')}</div>
                    <Badge className={`${getConditionColor(selectedCurb?.condition || 'old')} text-white mb-2`}>
                      {getConditionText(selectedCurb?.condition || 'old')}
                    </Badge>
                    <p className="font-semibold">{selectedCurb?.material} –±–æ—Ä–¥—é—Ä</p>
                    <p className="text-sm text-muted-foreground">–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {selectedCurb?.price.toLocaleString()}‚ÇΩ</p>
                  </div>

                  <div className="space-y-2">
                    <Button 
                      className="game-button w-full"
                      onClick={searchForDefects}
                      disabled={isSearchingDefects}
                    >
                      <Icon name="Search" className="mr-2" />
                      {isSearchingDefects ? '–ò—â–µ–º –¥–µ—Ñ–µ–∫—Ç—ã...' : '–ù–∞–π—Ç–∏ –¥–µ—Ñ–µ–∫—Ç'}
                    </Button>
                    
                    {foundDefects.length > 0 && (
                      <div className="bg-red-500/20 border border-red-500/40 rounded-lg p-3">
                        <p className="font-semibold text-red-400 mb-2">
                          üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
                        </p>
                        {foundDefects.map((defect, index) => (
                          <p key={index} className="text-sm text-red-300">
                            ‚Ä¢ {defect}
                          </p>
                        ))}
                      </div>
                    )}

                    <Button 
                      className="game-button w-full"
                      onClick={() => setShowContractorDialog(true)}
                      disabled={!foundDefects.length}
                    >
                      <Icon name="Users" className="mr-2" />
                      –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
                    </Button>
                    
                    {!foundDefects.length && (
                      <p className="text-sm text-muted-foreground text-center">
                        –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã
                      </p>
                    )}
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          ))}
        </div>

        {/* Action buttons */}
        <div className="flex justify-center gap-4 mb-8">
          <Button className="game-button" onClick={() => setShowCurbConstructor(true)}>
            <Icon name="Settings" className="mr-2" />
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ä–¥—é—Ä–æ–≤
          </Button>
          <Button className="game-button" onClick={() => addNotification('üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∏—Ç—Å—è!')}>
            <Icon name="Trophy" className="mr-2" />
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </Button>
        </div>

        {/* Statistics */}
        <div className="resource-glow rounded-xl p-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div>
              <Icon name="TrendingUp" className="mx-auto mb-2 text-primary" />
              <p className="text-sm text-muted-foreground">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {totalSpent.toLocaleString()}‚ÇΩ
              </p>
              <p className="text-xs text-muted-foreground">
                {(totalSpent / 10000000 * 100).toFixed(1)}% –æ—Ç –±—é–¥–∂–µ—Ç–∞
              </p>
            </div>
            <div>
              <Icon name="Coins" className="mx-auto mb-2 text-accent" />
              <p className="text-sm text-muted-foreground">–û—Ç–∫–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {gameState.corruption.toLocaleString()}‚ÇΩ
              </p>
              <p className="text-xs text-muted-foreground">
                –õ–∏—á–Ω–∞—è –≤—ã–≥–æ–¥–∞ üí∞
              </p>
            </div>
            <div>
              <Icon name="Award" className="mx-auto mb-2 text-secondary" />
              <p className="text-sm text-muted-foreground">–ë–æ—Ä–¥—é—Ä–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {curbs.filter(c => c.condition === 'new').length}/9
              </p>
              <p className="text-xs text-muted-foreground">
                –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–±–æ—Ç
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Contractor Selection Dialog */}
      <Dialog open={showContractorDialog} onOpenChange={setShowContractorDialog}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Icon name="Users" />
              –í—ã–±–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –±–æ—Ä–¥—é—Ä–∞. –ö–∞–∂–¥—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É, –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ—Ç–∫–∞—Ç—ã.
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {contractors.map((contractor) => (
                <div
                  key={contractor.id}
                  className={`p-4 border rounded-lg cursor-pointer transition-all hover:border-primary ${
                    selectedContractor?.id === contractor.id ? 'border-primary bg-primary/10' : 'border-border'
                  }`}
                  onClick={() => setSelectedContractor(contractor)}
                >
                  <div className="flex items-center gap-3 mb-3">
                    <span className="text-2xl">{contractor.icon}</span>
                    <div>
                      <h3 className="font-semibold">{contractor.name}</h3>
                      <div className="flex gap-1">
                        {Array.from({ length: 5 }, (_, i) => (
                          <span key={i} className={i < contractor.reputation ? 'text-yellow-500' : 'text-gray-300'}>
                            ‚≠ê
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  <p className="text-sm text-muted-foreground mb-3">{contractor.description}</p>
                  
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div>
                      <span className="font-semibold">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                      <span className={contractor.costModifier < 1 ? 'text-green-500' : contractor.costModifier > 1 ? 'text-red-500' : 'text-gray-400'}>
                        {contractor.costModifier < 1 ? ' ‚Üì' : contractor.costModifier > 1 ? ' ‚Üë' : ' ='}
                        {Math.abs(1 - contractor.costModifier) * 100}%
                      </span>
                    </div>
                    <div>
                      <span className="font-semibold">–ö–∞—á–µ—Å—Ç–≤–æ:</span>
                      <span className={contractor.qualityModifier > 1 ? 'text-green-500' : contractor.qualityModifier < 1 ? 'text-red-500' : 'text-gray-400'}>
                        {contractor.qualityModifier > 1 ? ' ‚Üë' : contractor.qualityModifier < 1 ? ' ‚Üì' : ' ='}
                        {Math.abs(1 - contractor.qualityModifier) * 100}%
                      </span>
                    </div>
                    <div>
                      <span className="font-semibold">–û—Ç–∫–∞—Ç—ã:</span>
                      <span className={contractor.corruptionModifier > 0.3 ? 'text-green-500' : 'text-yellow-500'}>
                        {(contractor.corruptionModifier * 100)}%
                      </span>
                    </div>
                    <div>
                      <span className="font-semibold">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                      <span className={contractor.timeModifier < 1 ? 'text-green-500' : contractor.timeModifier > 1 ? 'text-red-500' : 'text-gray-400'}>
                        {contractor.timeModifier < 1 ? ' ‚Üë' : contractor.timeModifier > 1 ? ' ‚Üì' : ' ='}
                        {Math.abs(1 - contractor.timeModifier) * 100}%
                      </span>
                    </div>
                  </div>
                  
                  {contractor.speciality && (
                    <Badge className="mt-2" variant="secondary">
                      üíé {contractor.speciality}
                    </Badge>
                  )}
                </div>
              ))}
            </div>
            
            {selectedContractor && (
              <div className="border-t pt-4">
                <Button 
                  className="w-full game-button"
                  onClick={() => setShowCurbConstructor(true)}
                >
                  <Icon name="ArrowRight" className="mr-2" />
                  –î–∞–ª–µ–µ: –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –æ–ø—Ü–∏–π
                </Button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Curb Constructor Dialog */}
      <Dialog open={showCurbConstructor} onOpenChange={setShowCurbConstructor}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Icon name="Settings" />
              –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ä–¥—é—Ä–æ–≤
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-6">
            {selectedContractor && (
              <div className="bg-primary/10 border border-primary/20 rounded-lg p-3">
                <p className="text-sm">
                  <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—Ä—è–¥—á–∏–∫:</strong> {selectedContractor.name}
                </p>
              </div>
            )}
            
            {/* Material Selection */}
            <div>
              <h3 className="font-semibold mb-3">–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {[
                  { id: 'concrete', name: '–ë–µ—Ç–æ–Ω', price: 1000, emoji: 'üß±' },
                  { id: 'granite', name: '–ì—Ä–∞–Ω–∏—Ç', price: 15000, emoji: 'üóø' },
                  { id: 'marble', name: '–ú—Ä–∞–º–æ—Ä', price: 25000, emoji: '‚ö™' },
                  { id: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫', price: 500, emoji: 'üü°' },
                  { id: 'gold', name: '–ó–æ–ª–æ—Ç–æ', price: 50000, emoji: 'üèÜ' }
                ].map((material) => (
                  <div
                    key={material.id}
                    className={`p-3 border rounded-lg cursor-pointer text-center transition-all hover:border-primary ${
                      curbConfig.material === material.id ? 'border-primary bg-primary/10' : 'border-border'
                    }`}
                    onClick={() => setCurbConfig(prev => ({ ...prev, material: material.id, basePrice: material.price }))}
                  >
                    <div className="text-2xl mb-1">{material.emoji}</div>
                    <div className="font-semibold text-sm">{material.name}</div>
                    <div className="text-xs text-muted-foreground">{material.price.toLocaleString()}‚ÇΩ</div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Extras */}
            <div>
              <h3 className="font-semibold mb-3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</h3>
              <div className="space-y-3">
                {[
                  { id: 'lighting', name: 'LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞', price: 2000, emoji: 'üí°' },
                  { id: 'antiVandal', name: '–ê–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', price: 1500, emoji: 'üõ°Ô∏è' },
                  { id: 'heating', name: '–ü–æ–¥–æ–≥—Ä–µ–≤ –∑–∏–º–æ–π', price: 3000, emoji: 'üî•' }
                ].map((extra) => (
                  <label key={extra.id} className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:border-primary">
                    <input
                      type="checkbox"
                      checked={!!curbConfig.extras[extra.id as keyof typeof curbConfig.extras]}
                      onChange={(e) => setCurbConfig(prev => ({
                        ...prev,
                        extras: { ...prev.extras, [extra.id]: e.target.checked }
                      }))}
                      className="w-4 h-4"
                    />
                    <span className="text-xl">{extra.emoji}</span>
                    <div className="flex-1">
                      <div className="font-semibold">{extra.name}</div>
                      <div className="text-sm text-muted-foreground">+{extra.price.toLocaleString()}‚ÇΩ</div>
                    </div>
                  </label>
                ))}
                
                <label className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:border-primary">
                  <input
                    type="checkbox"
                    checked={!!curbConfig.extras.customColor}
                    onChange={(e) => setCurbConfig(prev => ({
                      ...prev,
                      extras: { ...prev.extras, customColor: e.target.checked ? '#ff0000' : undefined }
                    }))}
                    className="w-4 h-4"
                  />
                  <span className="text-xl">üé®</span>
                  <div className="flex-1">
                    <div className="font-semibold">–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç</div>
                    <div className="text-sm text-muted-foreground">+500‚ÇΩ</div>
                  </div>
                  {curbConfig.extras.customColor && (
                    <input
                      type="color"
                      value={curbConfig.extras.customColor}
                      onChange={(e) => setCurbConfig(prev => ({
                        ...prev,
                        extras: { ...prev.extras, customColor: e.target.value }
                      }))}
                      className="w-8 h-8 rounded border"
                    />
                  )}
                </label>
              </div>
            </div>
            
            {/* Price Summary */}
            {selectedContractor && (
              <div className="border-t pt-4 space-y-3">
                <div className="bg-muted p-4 rounded-lg">
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                    <div className="text-right">{curbConfig.basePrice.toLocaleString()}‚ÇΩ</div>
                    
                    {curbConfig.extras.lighting && (
                      <>
                        <div>+ LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞:</div>
                        <div className="text-right">+2,000‚ÇΩ</div>
                      </>
                    )}
                    
                    {curbConfig.extras.antiVandal && (
                      <>
                        <div>+ –ê–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:</div>
                        <div className="text-right">+1,500‚ÇΩ</div>
                      </>
                    )}
                    
                    {curbConfig.extras.heating && (
                      <>
                        <div>+ –ü–æ–¥–æ–≥—Ä–µ–≤:</div>
                        <div className="text-right">+3,000‚ÇΩ</div>
                      </>
                    )}
                    
                    {curbConfig.extras.customColor && (
                      <>
                        <div>+ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç:</div>
                        <div className="text-right">+500‚ÇΩ</div>
                      </>
                    )}
                    
                    <div className="border-t pt-2 font-semibold">
                      –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä {selectedContractor.name}:
                    </div>
                    <div className="border-t pt-2 text-right font-semibold">
                      √ó{selectedContractor.costModifier}
                    </div>
                    
                    <div className="text-lg font-bold">–ò—Ç–æ–≥–æ:</div>
                    <div className="text-lg font-bold text-right">
                      {calculateFinalPrice().toLocaleString()}‚ÇΩ
                    </div>
                    
                    <div className="text-sm text-muted-foreground">–û—Ç–∫–∞—Ç:</div>
                    <div className="text-sm text-right text-green-500">
                      +{Math.floor(calculateFinalPrice() * 0.25 * selectedContractor.corruptionModifier).toLocaleString()}‚ÇΩ
                    </div>
                  </div>
                </div>
                
                <Button 
                  className="w-full game-button"
                  onClick={() => {
                    const materialName = ['concrete', 'granite', 'marble', 'plastic', 'gold'][['concrete', 'granite', 'marble', 'plastic', 'gold'].indexOf(curbConfig.material)];
                    const materialDisplay = ['–ë–µ—Ç–æ–Ω–Ω—ã–π', '–ì—Ä–∞–Ω–∏—Ç–Ω—ã–π', '–ú—Ä–∞–º–æ—Ä–Ω—ã–π', '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π', '–ó–æ–ª–æ—Ç–æ–π'][['concrete', 'granite', 'marble', 'plastic', 'gold'].indexOf(curbConfig.material)];
                    
                    let extrasText = '';
                    if (curbConfig.extras.lighting) extrasText += ' —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π';
                    if (curbConfig.extras.antiVandal) extrasText += ' –∞–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω—ã–π';
                    if (curbConfig.extras.heating) extrasText += ' —Å –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º';
                    if (curbConfig.extras.customColor) extrasText += ' –∫–∞—Å—Ç–æ–º–Ω—ã–π';
                    
                    replaceCurb(
                      materialDisplay + extrasText,
                      calculateFinalPrice(),
                      materialName || 'concrete'
                    );
                  }}
                  disabled={!selectedContractor || gameState.budget < calculateFinalPrice()}
                >
                  <Icon name="CheckCircle" className="mr-2" />
                  –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ä–¥—é—Ä
                </Button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CurbMania;