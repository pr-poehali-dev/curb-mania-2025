import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';

interface GameState {
  budget: number;
  daysUntilElection: number;
  reputation: number;
  corruption: number;
}

interface Curb {
  id: number;
  type: string;
  condition: 'new' | 'good' | 'old' | 'critical';
  material: string;
  price: number;
  defects?: string[];
}

const CurbMania = () => {
  const [gameState, setGameState] = useState<GameState>({
    budget: 10000000,
    daysUntilElection: 365,
    reputation: 75,
    corruption: 0
  });

  const [curbs, setCurbs] = useState<Curb[]>([
    { id: 1, type: 'concrete', condition: 'old', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 2, type: 'granite', condition: 'good', material: '–ì—Ä–∞–Ω–∏—Ç–Ω—ã–π', price: 4000 },
    { id: 3, type: 'marble', condition: 'new', material: '–ú—Ä–∞–º–æ—Ä–Ω—ã–π', price: 6000 },
    { id: 4, type: 'plastic', condition: 'critical', material: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π', price: 500 },
    { id: 5, type: 'concrete', condition: 'old', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 6, type: 'gold', condition: 'new', material: '–ó–æ–ª–æ—Ç–æ–π', price: 21000 },
    { id: 7, type: 'granite', condition: 'good', material: '–ì—Ä–∞–Ω–∏—Ç–Ω—ã–π', price: 4000 },
    { id: 8, type: 'concrete', condition: 'critical', material: '–ë–µ—Ç–æ–Ω–Ω—ã–π', price: 1000 },
    { id: 9, type: 'marble', condition: 'old', material: '–ú—Ä–∞–º–æ—Ä–Ω—ã–π', price: 6000 }
  ]);

  const [selectedCurb, setSelectedCurb] = useState<Curb | null>(null);
  const [isSearchingDefects, setIsSearchingDefects] = useState(false);
  const [foundDefects, setFoundDefects] = useState<string[]>([]);
  const [notifications, setNotifications] = useState<string[]>([]);
  const [totalSpent, setTotalSpent] = useState(0);
  const [showTutorial, setShowTutorial] = useState(true);

  const defectsList = [
    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–∏–∫—Ä–æ—Ç—Ä–µ—â–∏–Ω–∞",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ì–û–°–¢–∞ 52289-2004",
    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –æ—Ç—Ç–µ–Ω–æ–∫",
    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "–ù–µ—ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥"
  ];

  const getCurbEmoji = (type: string) => {
    switch (type) {
      case 'concrete': return 'üß±';
      case 'granite': return 'üóø';
      case 'marble': return '‚ö™';
      case 'plastic': return 'üü°';
      case 'gold': return 'üèÜ';
      default: return 'üèóÔ∏è';
    }
  };

  const getCurbGradient = (type: string) => {
    switch (type) {
      case 'concrete': return 'from-gray-600 to-gray-400';
      case 'granite': return 'from-slate-700 to-slate-500';
      case 'marble': return 'from-white to-gray-200';
      case 'plastic': return 'from-yellow-500 to-orange-400';
      case 'gold': return 'from-yellow-500 to-yellow-300';
      default: return 'from-gray-500 to-gray-300';
    }
  };

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case 'new': return 'bg-green-500';
      case 'good': return 'bg-blue-500';
      case 'old': return 'bg-yellow-500';
      case 'critical': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getConditionText = (condition: string) => {
    switch (condition) {
      case 'new': return '–ù–æ–≤—ã–π';
      case 'good': return '–•–æ—Ä–æ—à–∏–π';
      case 'old': return '–°—Ç–∞—Ä—ã–π';
      case 'critical': return '–ê–≤–∞—Ä–∏–π–Ω—ã–π';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const searchForDefects = () => {
    setIsSearchingDefects(true);
    
    setTimeout(() => {
      const randomDefects = defectsList
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.floor(Math.random() * 3) + 1);
      
      setFoundDefects(randomDefects);
      setIsSearchingDefects(false);
    }, 2000);
  };

  const replaceCurb = (newMaterial: string, newPrice: number, newType: string) => {
    if (selectedCurb && gameState.budget >= newPrice) {
      const kickback = Math.floor(newPrice * 0.25);
      const actualCost = newPrice - kickback;
      
      setCurbs(prev => prev.map(curb => 
        curb.id === selectedCurb.id 
          ? { ...curb, condition: 'new', material: newMaterial, price: newPrice, type: newType }
          : curb
      ));
      
      setGameState(prev => ({
        ...prev,
        budget: prev.budget - actualCost,
        reputation: Math.min(100, prev.reputation + (foundDefects.length * 2)),
        corruption: prev.corruption + kickback
      }));
      
      setTotalSpent(prev => prev + actualCost);
      
      addNotification(`üéâ –ó–∞–º–µ–Ω–∏–ª–∏ ${selectedCurb.material} –Ω–∞ ${newMaterial}! –û—Ç–∫–∞—Ç: ${kickback.toLocaleString()}‚ÇΩ`);
      
      setSelectedCurb(null);
      setFoundDefects([]);
    }
  };

  const addNotification = (message: string) => {
    setNotifications(prev => [message, ...prev.slice(0, 2)]);
    setTimeout(() => {
      setNotifications(prev => prev.slice(0, -1));
    }, 5000);
  };

  useEffect(() => {
    const timer = setInterval(() => {
      setGameState(prev => ({
        ...prev,
        daysUntilElection: Math.max(0, prev.daysUntilElection - 1)
      }));
    }, 5000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-muted to-background text-foreground font-['Rubik']">
      {/* Header with resources */}
      <div className="resource-panel mx-4 mt-4">
        <div className="flex flex-wrap gap-4 justify-between items-center">
          <div className="flex items-center gap-2">
            <Icon name="Banknote" className="text-primary" />
            <div>
              <p className="text-sm text-muted-foreground">–ë—é–¥–∂–µ—Ç</p>
              <p className="text-lg font-bold text-primary">
                {gameState.budget.toLocaleString()}‚ÇΩ
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Icon name="Calendar" className="text-accent" />
            <div>
              <p className="text-sm text-muted-foreground">–î–æ –≤—ã–±–æ—Ä–æ–≤</p>
              <p className="text-lg font-bold text-accent">
                {gameState.daysUntilElection} –¥–Ω–µ–π
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Icon name="Users" className="text-secondary" />
            <div>
              <p className="text-sm text-muted-foreground">–†–µ–ø—É—Ç–∞—Ü–∏—è</p>
              <div className="flex items-center gap-2">
                <Progress value={gameState.reputation} className="w-20" />
                <span className="text-lg font-bold text-secondary">
                  {gameState.reputation}%
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Game title */}
      <div className="text-center py-8">
        <h1 className="text-5xl font-bold font-['Oswald'] holographic text-transparent bg-clip-text mb-2">
          –ë–û–†–î–Æ–† –ú–ê–ù–ò–Ø 2025
        </h1>
        <p className="text-lg text-muted-foreground">
          –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å–≤–æ–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        </p>
      </div>

      {/* Notifications */}
      {notifications.length > 0 && (
        <div className="fixed top-4 right-4 z-50 space-y-2">
          {notifications.map((notification, index) => (
            <div key={index} className="bg-primary text-primary-foreground px-4 py-2 rounded-lg shadow-lg animate-fade-in">
              {notification}
            </div>
          ))}
        </div>
      )}

      {/* Tutorial overlay */}
      {showTutorial && (
        <div className="fixed inset-0 bg-black/50 z-40 flex items-center justify-center p-4">
          <Card className="max-w-md bg-card p-6">
            <h3 className="text-xl font-bold mb-4">üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç—å!</h3>
            <div className="space-y-3 text-sm">
              <p>üéØ <strong>–¶–µ–ª—å:</strong> –û—Å–≤–æ–∏—Ç—å –±—é–¥–∂–µ—Ç, –∑–∞–º–µ–Ω–∏–≤ —Å—Ç–∞—Ä—ã–µ –±–æ—Ä–¥—é—Ä—ã</p>
              <p>üí∞ <strong>–ë—é–¥–∂–µ—Ç:</strong> 10 –º–ª–Ω —Ä—É–±–ª–µ–π –Ω–∞ –≥–æ–¥</p>
              <p>üîç <strong>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</strong></p>
              <ul className="list-disc ml-4 space-y-1">
                <li>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –±–æ—Ä–¥—é—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                <li>–ò—â–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã</li>
                <li>–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Ä–æ–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–∫–∞—Ç–æ–≤</li>
                <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ —Å—Ä–æ–∫–∞–º–∏ –≤—ã–±–æ—Ä–æ–≤</li>
              </ul>
            </div>
            <Button className="w-full mt-4" onClick={() => setShowTutorial(false)}>
              –ù–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É —á–∏–Ω–æ–≤–Ω–∏–∫–∞! üöÄ
            </Button>
          </Card>
        </div>
      )}

      {/* Game field */}
      <div className="max-w-4xl mx-auto px-4">
        <div className="grid grid-cols-3 gap-4 mb-8">
          {curbs.map((curb) => (
            <Dialog key={curb.id}>
              <DialogTrigger asChild>
                <Card className={`curb-item bg-gradient-to-br ${getCurbGradient(curb.type)}`} onClick={() => setSelectedCurb(curb)}>
                  <div className="text-center">
                    <div className="text-4xl mb-2">{getCurbEmoji(curb.type)}</div>
                    <Badge className={`${getConditionColor(curb.condition)} text-white mb-2`}>
                      {getConditionText(curb.condition)}
                    </Badge>
                    <p className="font-semibold text-sm text-black">{curb.material}</p>
                    <p className="text-xs text-gray-700">
                      {curb.price.toLocaleString()}‚ÇΩ
                    </p>
                  </div>
                </Card>
              </DialogTrigger>
              
              <DialogContent className="max-w-md">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <Icon name="Wrench" />
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ä–¥—é—Ä–æ–º
                  </DialogTitle>
                </DialogHeader>
                
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-6xl mb-2">{getCurbEmoji(selectedCurb?.type || 'concrete')}</div>
                    <Badge className={`${getConditionColor(selectedCurb?.condition || 'old')} text-white mb-2`}>
                      {getConditionText(selectedCurb?.condition || 'old')}
                    </Badge>
                    <p className="font-semibold">{selectedCurb?.material} –±–æ—Ä–¥—é—Ä</p>
                    <p className="text-sm text-muted-foreground">–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {selectedCurb?.price.toLocaleString()}‚ÇΩ</p>
                  </div>

                  <div className="space-y-2">
                    <Button 
                      className="game-button w-full"
                      onClick={searchForDefects}
                      disabled={isSearchingDefects}
                    >
                      <Icon name="Search" className="mr-2" />
                      {isSearchingDefects ? '–ò—â–µ–º –¥–µ—Ñ–µ–∫—Ç—ã...' : '–ù–∞–π—Ç–∏ –¥–µ—Ñ–µ–∫—Ç'}
                    </Button>
                    
                    {foundDefects.length > 0 && (
                      <div className="bg-red-500/20 border border-red-500/40 rounded-lg p-3">
                        <p className="font-semibold text-red-400 mb-2">
                          üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
                        </p>
                        {foundDefects.map((defect, index) => (
                          <p key={index} className="text-sm text-red-300">
                            ‚Ä¢ {defect}
                          </p>
                        ))}
                      </div>
                    )}

                    <div className="grid grid-cols-1 gap-2">
                      <Button 
                        className="game-button w-full bg-gradient-to-r from-slate-600 to-slate-400"
                        onClick={() => replaceCurb('–ü—Ä–µ–º–∏—É–º –≥—Ä–∞–Ω–∏—Ç–Ω—ã–π', 15000, 'granite')}
                        disabled={gameState.budget < 15000}
                      >
                        <Icon name="Hammer" className="mr-2" />
                        üóø –ì—Ä–∞–Ω–∏—Ç (15,000‚ÇΩ) | –û—Ç–∫–∞—Ç: 3,750‚ÇΩ
                      </Button>
                      
                      <Button 
                        className="game-button w-full bg-gradient-to-r from-white to-gray-200 text-black"
                        onClick={() => replaceCurb('–≠–ª–∏—Ç–Ω—ã–π –º—Ä–∞–º–æ—Ä–Ω—ã–π', 25000, 'marble')}
                        disabled={gameState.budget < 25000}
                      >
                        <Icon name="Crown" className="mr-2" />
                        ‚ö™ –ú—Ä–∞–º–æ—Ä (25,000‚ÇΩ) | –û—Ç–∫–∞—Ç: 6,250‚ÇΩ
                      </Button>
                      
                      <Button 
                        className="game-button w-full bg-gradient-to-r from-yellow-500 to-yellow-300 text-black"
                        onClick={() => replaceCurb('–ó–æ–ª–æ—Ç–æ–π —Å –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º', 50000, 'gold')}
                        disabled={gameState.budget < 50000}
                      >
                        <Icon name="Zap" className="mr-2" />
                        üèÜ VIP –ó–æ–ª–æ—Ç–æ (50,000‚ÇΩ) | –û—Ç–∫–∞—Ç: 12,500‚ÇΩ
                      </Button>
                    </div>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          ))}
        </div>

        {/* Action buttons */}
        <div className="flex justify-center gap-4 mb-8">
          <Button className="game-button" onClick={() => addNotification('üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')}>
            <Icon name="Settings" className="mr-2" />
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ä–¥—é—Ä–æ–≤
          </Button>
          <Button className="game-button" onClick={() => addNotification('üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç!')}>
            <Icon name="Users" className="mr-2" />
            –ü–æ–¥—Ä—è–¥—á–∏–∫–∏
          </Button>
          <Button className="game-button" onClick={() => addNotification('üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∏—Ç—Å—è!')}>
            <Icon name="Trophy" className="mr-2" />
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </Button>
        </div>

        {/* Statistics */}
        <Card className="resource-panel">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div>
              <Icon name="TrendingUp" className="mx-auto mb-2 text-primary" />
              <p className="text-sm text-muted-foreground">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {totalSpent.toLocaleString()}‚ÇΩ
              </p>
              <p className="text-xs text-muted-foreground">
                {(totalSpent / 10000000 * 100).toFixed(1)}% –æ—Ç –±—é–¥–∂–µ—Ç–∞
              </p>
            </div>
            <div>
              <Icon name="Coins" className="mx-auto mb-2 text-accent" />
              <p className="text-sm text-muted-foreground">–û—Ç–∫–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {gameState.corruption.toLocaleString()}‚ÇΩ
              </p>
              <p className="text-xs text-muted-foreground">
                –õ–∏—á–Ω–∞—è –≤—ã–≥–æ–¥–∞ üí∞
              </p>
            </div>
            <div>
              <Icon name="Award" className="mx-auto mb-2 text-secondary" />
              <p className="text-sm text-muted-foreground">–ë–æ—Ä–¥—é—Ä–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–æ</p>
              <p className="text-xl font-bold">
                {curbs.filter(c => c.condition === 'new').length}/9
              </p>
              <p className="text-xs text-muted-foreground">
                –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–±–æ—Ç
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default CurbMania;