import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { Contractor, CurbConfig } from '@/types/game';

interface CurbConstructorDialogProps {
  showCurbConstructor: boolean;
  onClose: () => void;
  selectedContractor: Contractor | null;
  curbConfig: CurbConfig;
  setCurbConfig: React.Dispatch<React.SetStateAction<CurbConfig>>;
  calculateFinalPrice: () => number;
  onReplaceCurb: () => void;
  budget: number;
}

export const CurbConstructorDialog: React.FC<CurbConstructorDialogProps> = ({
  showCurbConstructor,
  onClose,
  selectedContractor,
  curbConfig,
  setCurbConfig,
  calculateFinalPrice,
  onReplaceCurb,
  budget
}) => {
  const materials = [
    { id: 'concrete', name: '–ë–µ—Ç–æ–Ω', price: 1000, emoji: 'üß±' },
    { id: 'granite', name: '–ì—Ä–∞–Ω–∏—Ç', price: 15000, emoji: 'üóø' },
    { id: 'marble', name: '–ú—Ä–∞–º–æ—Ä', price: 25000, emoji: '‚ö™' },
    { id: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫', price: 500, emoji: 'üü°' },
    { id: 'gold', name: '–ó–æ–ª–æ—Ç–æ', price: 50000, emoji: 'üèÜ' }
  ];

  const extras = [
    { id: 'lighting', name: 'LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞', price: 2000, emoji: 'üí°' },
    { id: 'antiVandal', name: '–ê–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', price: 1500, emoji: 'üõ°Ô∏è' },
    { id: 'heating', name: '–ü–æ–¥–æ–≥—Ä–µ–≤ –∑–∏–º–æ–π', price: 3000, emoji: 'üî•' }
  ];

  return (
    <Dialog open={showCurbConstructor} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Icon name="Settings" />
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ä–¥—é—Ä–æ–≤
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {selectedContractor && (
            <div className="bg-primary/10 border border-primary/20 rounded-lg p-3">
              <p className="text-sm">
                <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—Ä—è–¥—á–∏–∫:</strong> {selectedContractor.name}
              </p>
            </div>
          )}
          
          {/* Material Selection */}
          <div>
            <h3 className="font-semibold mb-3">–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {materials.map((material) => (
                <div
                  key={material.id}
                  className={`p-3 border rounded-lg cursor-pointer text-center transition-all hover:border-primary ${
                    curbConfig.material === material.id ? 'border-primary bg-primary/10' : 'border-border'
                  }`}
                  onClick={() => setCurbConfig(prev => ({ ...prev, material: material.id, basePrice: material.price }))}
                >
                  <div className="text-2xl mb-1">{material.emoji}</div>
                  <div className="font-semibold text-sm">{material.name}</div>
                  <div className="text-xs text-muted-foreground">{material.price.toLocaleString()}‚ÇΩ</div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Extras */}
          <div>
            <h3 className="font-semibold mb-3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</h3>
            <div className="space-y-3">
              {extras.map((extra) => (
                <label key={extra.id} className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:border-primary">
                  <input
                    type="checkbox"
                    checked={!!curbConfig.extras[extra.id as keyof typeof curbConfig.extras]}
                    onChange={(e) => setCurbConfig(prev => ({
                      ...prev,
                      extras: { ...prev.extras, [extra.id]: e.target.checked }
                    }))}
                    className="w-4 h-4"
                  />
                  <span className="text-xl">{extra.emoji}</span>
                  <div className="flex-1">
                    <div className="font-semibold">{extra.name}</div>
                    <div className="text-sm text-muted-foreground">+{extra.price.toLocaleString()}‚ÇΩ</div>
                  </div>
                </label>
              ))}
              
              <label className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:border-primary">
                <input
                  type="checkbox"
                  checked={!!curbConfig.extras.customColor}
                  onChange={(e) => setCurbConfig(prev => ({
                    ...prev,
                    extras: { ...prev.extras, customColor: e.target.checked ? '#ff0000' : undefined }
                  }))}
                  className="w-4 h-4"
                />
                <span className="text-xl">üé®</span>
                <div className="flex-1">
                  <div className="font-semibold">–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç</div>
                  <div className="text-sm text-muted-foreground">+500‚ÇΩ</div>
                </div>
                {curbConfig.extras.customColor && (
                  <input
                    type="color"
                    value={curbConfig.extras.customColor}
                    onChange={(e) => setCurbConfig(prev => ({
                      ...prev,
                      extras: { ...prev.extras, customColor: e.target.value }
                    }))}
                    className="w-8 h-8 rounded border"
                  />
                )}
              </label>
            </div>
          </div>
          
          {/* Price Summary */}
          {selectedContractor && (
            <div className="border-t pt-4 space-y-3">
              <div className="bg-muted p-4 rounded-lg">
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                  <div className="text-right">{curbConfig.basePrice.toLocaleString()}‚ÇΩ</div>
                  
                  {curbConfig.extras.lighting && (
                    <>
                      <div>+ LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞:</div>
                      <div className="text-right">+2,000‚ÇΩ</div>
                    </>
                  )}
                  
                  {curbConfig.extras.antiVandal && (
                    <>
                      <div>+ –ê–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:</div>
                      <div className="text-right">+1,500‚ÇΩ</div>
                    </>
                  )}
                  
                  {curbConfig.extras.heating && (
                    <>
                      <div>+ –ü–æ–¥–æ–≥—Ä–µ–≤:</div>
                      <div className="text-right">+3,000‚ÇΩ</div>
                    </>
                  )}
                  
                  {curbConfig.extras.customColor && (
                    <>
                      <div>+ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç:</div>
                      <div className="text-right">+500‚ÇΩ</div>
                    </>
                  )}
                  
                  <div className="border-t pt-2 font-semibold">
                    –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä {selectedContractor.name}:
                  </div>
                  <div className="border-t pt-2 text-right font-semibold">
                    √ó{selectedContractor.costModifier}
                  </div>
                  
                  <div className="text-lg font-bold">–ò—Ç–æ–≥–æ:</div>
                  <div className="text-lg font-bold text-right">
                    {calculateFinalPrice().toLocaleString()}‚ÇΩ
                  </div>
                  
                  <div className="text-sm text-muted-foreground">–û—Ç–∫–∞—Ç:</div>
                  <div className="text-sm text-right text-green-500">
                    +{Math.floor(calculateFinalPrice() * 0.25 * selectedContractor.corruptionModifier).toLocaleString()}‚ÇΩ
                  </div>
                </div>
              </div>
              
              <Button 
                className="w-full game-button"
                onClick={onReplaceCurb}
                disabled={!selectedContractor || budget < calculateFinalPrice()}
              >
                <Icon name="CheckCircle" className="mr-2" />
                –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ä–¥—é—Ä
              </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};